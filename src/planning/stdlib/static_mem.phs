"./prelude.phs" require use
"./bits.phs" require use

((F32 I32): 1 ) (:
    swap "i32.reinterpret_f32" asm swap
    static_init
) $static_init fun
((F64 I32): 1 ) (:
    swap "i64.reinterpret_f64" asm swap
    static_init
) $static_init fun
((I64 I32): 1 ) (:
    ( $v $addr ) =
    # Initialize upper
    v 0xffffffffL and "i32.wrap_i64" asm addr static_init

    # Initialize lower
    v 32L >> "i32.wrap_i64" asm addr 4 + static_init
) $static_init fun
((I32 I32): 1 ) (:
    ( $v $addr ) =
    # NOTE little endian
    v 0xff and
        addr static_init_byte
    v 8 >> 0xff and
        addr 1 + static_init_byte
    v 16 >> 0xff and
        addr 2 + static_init_byte
    v 24 >> 0xff and
        addr 3 + static_init_byte
) $static_init fun

# Store value in memory
# <unit> <addr> <value> store
((Unit I32 I32): 1 ) (:
    swap ( Unit I32 I32 ) ( Unit ) Arrow "i32.store" _asm
) $store fun
((Unit F32 I32): 1 ) (:
    swap ( Unit I32 F32 ) ( Unit ) Arrow "f32.store" _asm
) $store fun
((Unit I64 I32): 1 ) (:
    swap ( Unit I32 I64 ) ( Unit ) Arrow "i64.store" _asm
) $store fun
((Unit F64 I32): 1 ) (:
    swap ( Unit I32 F64 ) ( Unit ) Arrow "f64.store" _asm
) $store fun

# Load value from memory
# <unit> <I32 addr> <TYPE> load
(: I32 == ) (: pop "i32.load" asm ) $load fun
(: I64 == ) (: pop "i64.load" asm ) $load fun
(: F32 == ) (: pop "f32.load" asm ) $load fun
(: F64 == ) (: pop "f64.load" asm ) $load fun

# Byte width of type
# ... this prob should be part of compiler...
# <type> sizeof -- <byte width>
(: I32 == ) (: pop 4 ) $sizeof fun
(: F32 == ) (: pop 4 ) $sizeof fun
(: I64 == ) (: pop 8 ) $sizeof fun
(: F64 == ) (: pop 8 ) $sizeof fun