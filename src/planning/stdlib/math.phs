"./prelude.phs" require use

I32 I64 | $Int =
F32 F64 | $Float =
Int Float | $Num =

# Absolute value
(: true ) (: touch ) $abs fun
(: 0.0 < ) (: 0 swap - ) $abs fun
((F32): 1 ) (: "f32.abs" asm ) $abs fun
((F64): 1 ) (: "f64.abs" asm ) $abs fun

# Use bigger of two values
(: true ) (: pop ) $max fun
(: < ) (: ( $a $b ) = b ) $max fun
((F32): 1 ) (: "f32.max" asm ) $max fun
((F64): 1 ) (: "f64.max" asm ) $max fun

# Use smaller of two values
(: true ) (: pop ) $min fun
(: > ) (: ( $a $b ) = b ) $min fun
((F32): 1 ) (: "f32.min" asm ) $min fun
((F64): 1 ) (: "f64.min" asm ) $min fun

# Square route
((F32): 1 ) (: "f32.sqrt" asm ) $sqrt fun
((F64): 1 ) (: "f64.sqrt" asm ) $sqrt fun

# Floor
((F32): 1 ) (: "f32.floor" asm ) $floor fun
((F64): 1 ) (: "f64.floor" asm ) $floor fun

# Ceiling
((F32): 1 ) (: "f32.ceil" asm ) $ceil fun
((F64): 1 ) (: "f64.ceil" asm ) $ceil fun

# Truncate float
((F32): 1 ) (: "f32.trunc" asm ) $trunc fun
((F64): 1 ) (: "f64.trunc" asm ) $trunc fun

# Nearest int ties to even
((F32): 1 ) (: "f32.nearest" asm ) $nearest fun
((F64): 1 ) (: "f64.nearest" asm ) $nearest fun

# PI constant
3.141592653589793 $PI =

# Factorial
(: 1 ) (:
    (rec:
        ( $n $ret ) =
        (: 1 ) (: n ) $branch fun
        (: n 0 > ) (: n 1 - ret n * iter ) $branch fun
        branch
    ) $iter =
    1 iter
) $fac fun