# Some type defs
I32 I64 | $Int =
(Int Int) (Int) Arrow $BinaryOperator =

# FIXME
((Int Int):
    # This doesn't branch properly
    (: ( $a $b ) =
        a type I32 ==
        b type I32 == &&
    ) (: "i32.or" asm ) $or fun
    (: ( $a $b ) =
        a type I64 ==
        b type I64 == &&
    ) (: "i64.or" asm ) $or fun
    or
) type BinaryOperator == :data

((Int Int):
    # This doesn't branch properly
    ((I32 I32): 1 ) ((I32 I32): "i32.or" asm ) $or fun
    ((I64 I64): 1 ) ((I64 I64): "i64.or" asm ) $or fun
    or
) type BinaryOperator == :data

# FIXME: classes with unions allow operations on disparate types

((I32 (I32) (I32) Arrow):
    $rec =
    $arg =
    arg 0 >
        ((): arg -1 + rec @ arg * )
        ((): 1 )
    select @
) fix $fac =

10 fac @

((I32): $v = ) $pop =
((I32): $v = v v ) $dup =
((I32 I32): $b = $a = b a ) $swap =

1 $true =
0 $false =

((I32): false == ) $not =

((I32 I32): 1 0 select select ) $and =
((I32 I32):