"../stdlib/prelude.phs" require use
"../stdlib/bits.phs" require use
"../stdlib/math.phs" require use
"../stdlib/static_mem.phs" require use

# Allocate static memory regions
4 static_region $x_addr =
4 static_region $y_addr =
4 static_region $dx_addr =
4 static_region $dy_addr =

# Initialize static memory regions
50 x_addr static_init
20 y_addr static_init
1 dx_addr static_init
1 dy_addr static_init

# Setters
((Unit I32): x_addr store ) $set_x =
((Unit I32): y_addr store ) $set_y =
((Unit I32): dx_addr store ) $set_dx =
((Unit I32): dy_addr store ) $set_dy =

# Getters
(: x_addr "i32.load" asm ) $get_x =
(: y_addr "i32.load" asm ) $get_y =
(: dx_addr "i32.load" asm ) $get_dx =
(: dy_addr "i32.load" asm ) $get_dy =

400 $width =
500 $height =
4 $ball_dim =

(: # Generate random int from 1-10
    Unit (F32) Arrow ( "js" "Math.random" ) import @
    10.0f * I32 cast 1 +
) $rng_1_10 =

(: # Update
    get_x $x = get_y $y =
    get_dx $dx = get_dy $dy =

    # Collision w/ walls
    (: true ) (: ) $x_cc fun
    (: x 0 <= ) (: rng_1_10 set_dx ) $x_cc fun
    (: x width ball_dim - >= ) (: 0 rng_1_10 - set_dx ) $x_cc fun
    x_cc
    (: true ) (: ) $y_cc fun
    (: y 0 <= ) (: rng_1_10 set_dy ) $y_cc fun
    (: y height ball_dim - >= ) (: 0 rng_1_10 - set_dy ) $y_cc fun
    y_cc

    # Move
    x get_dx + I32 cast set_x
    y get_dy + I32 cast set_y
) $update =

(:
    # Clear scene
    #0 0 height width
    #( Unit I32 I32 I32 I32 ) ( Unit ) Arrow
    #( "js" "contextClearRect" ) import @

    # Draw rectangle
    get_y get_x ball_dim ball_dim
    ( Unit I32 I32 I32 I32 ) ( Unit ) Arrow
    ( "js" "contextFillRect" ) import @

    # Debugging
    get_x get_y get_dx get_dy
    ( Unit I32 I32 I32 I32 ) ( Unit ) Arrow
    ( "js" "console.log" ) import @
) $draw =

( Unit ) (: draw ) "draw" export
( Unit ) (: update ) "update" export
( Unit ) (:
    update
    draw

    # Await next frame
    (Unit) (Unit) Arrow ( "js" "nextFrame" ) import @
) "loop" export