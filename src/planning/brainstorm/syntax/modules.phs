# Import using compiler import paths
$wasm import $wasm =

# Import via absolute path
"/home/users/tate/Desktop/libmath.phs" import $math =

# Import via relative path
"./vector.phs" import $vec =

# Define all module children locally
$vec $ use

# Define module children starting with . locally
math $. use

# Import a module
"./fake_math.phs" require $math =

# using a namespace
{
    {
        {+} $add =
    } namespace $math =
} namespace $ops =

1 3 $add $math ops @ @ :data # 4

# Note: @ == invoke identifier
# Note: ~ == unescape identifier
# n = math::fib(10)
10 $fib math @ $n =

# fn = (new math::FancyNum(11)).succ
11 $FancyNum math @ make .succ $fn =

# s = wasm::i32::add(10, 22)
10 22 $i32.add wasm @ $s =

# Overload fib function in math library to accept vectors
{
    type Any Vector2 ==
} {
    v .x v .y + $fib math @
} $fib math fun

# :debug math::fib(new Vector2<I32>(1, 2))
{ 1 2 } pack I32 Vector2 make $fib math @ :data

# This gives us a, b, c
"abc" import use

# Module contains c, d, e
# Warning: overlapping identifier 'c'
"cde" import use

# Solution: select what to use
# Use all identifiers except $c
"cde" import "" "^c$" use_some

# More sophistocated example
# Include everything that doesn't start with a .
#  except for some trig functions
"math" import $math =
math "^[^.]" "^(sin|cos|tan)h?$" use_some

{ "./stdlib/math.phs" require use
	$sqrt ~ $fac ~
} @ { $sqrt $fac } =
