"./prelude.phs" require use
"./bits.phs" require $bits =
"./number.phs" require $number =

# Absolute value
(: 1 ) (: $v = $v ~ ) $abs fun
(: 0.0 < ) (: 0 swap - ) $abs fun
((F32): 1 ) (: "f32.abs" asm ) $abs fun
((F64): 1 ) (: "f64.abs" asm ) $abs fun

# Use bigger of two values
(: 1 ) (: pop ) $max fun
(: < ) (: ( $a $b ) = b ) $max fun
((F32): 1 ) (: "f32.max" asm ) $max fun
((F64): 1 ) (: "f64.max" asm ) $max fun

# Use smaller of two values
(: 1 ) (: pop ) $min fun
(: > ) (: ( $a $b ) = b ) $min fun
((F32): 1 ) (: "f32.min" asm ) $min fun
((F64): 1 ) (: "f64.min" asm ) $min fun

# Square route
((F32): 1 ) (: "f32.sqrt" asm ) $sqrt fun
((F64): 1 ) (: "f64.sqrt" asm ) $sqrt fun

# Floor
((F32): 1 ) (: "f32.floor" asm ) $floor fun
((F64): 1 ) (: "f64.floor" asm ) $floor fun

# Ceiling
((F32): 1 ) (: "f32.ceil" asm ) $ceil fun
((F64): 1 ) (: "f64.ceil" asm ) $ceil fun

# Truncate float
((F32): 1 ) (: "f32.trunc" asm ) $trunc fun
((F64): 1 ) (: "f64.trunc" asm ) $trunc fun

# Nearest int ties to even
((F32): 1 ) (: "f32.nearest" asm ) $nearest fun
((F64): 1 ) (: "f64.nearest" asm ) $nearest fun

# Clamp a value between a given min and max
(: 1 ) (: pop pop ) $clamp fun
(: ( $n $min $max ) = n max > ) (: $max = pop pop max ) $clamp fun
(: ( $n $min $max ) = n min < ) (: pop $min = pop min ) $clamp fun

# Factorial
(: 1 ) (:
    (rec:
        ( $n $ret ) =
        (: 1 ) (: n ) $branch fun
        (: n 0 > ) (: n 1 - ret n * iter ) $branch fun
        branch
    ) $iter =
    1 iter
) $factorial fun

# Raise given number to given power
((number.Float number.Int): 1) (:
    ( $x $n ) =
    x type $Tf =

    (: 1 ) (:
        ((n type Tf Tf) rec: ( $n $r $l ) =
            (: 1 ) (:       n 2 /   r       l l *   iter ) $branch fun
            (: n 2 % ) (:   n 2 /   r l *   l l *   iter ) $branch fun
            (: n 1 <= ) (: r l * ) $branch fun
            branch
        ) $iter =
        n x 1.0 Tf cast iter
    ) $edges fun
    (: n 0 < ) (: 1 x -1 n - pow ) $edges
    (: n 0 == ) (: 1.0 Tf cast ) $edges
    edges
) $pow fun

# Some useful constants
2.7182818284590452354   $kE =	    # e
1.4426950408889634074   $kLOG2E =   # log_2 e
0.43429448190325182765  $kLOG10E =  # log_10 e
0.69314718055994530942  $kLN2 =	   	# log_e 2
2.30258509299404568402  $kLN10 =	# log_e 10
3.14159265358979323846  $kPI =	   	# pi

# Log base 2
((I32): 1 ) (: $n = 32 n bits.clz - ) $log2 fun
((I64): 1 ) (: $n = 64 n bits.clz - ) $log2 fun
((F32): 1 ) (: log kLN2 / ) $log2 fun # log_2 x = log_e x / log_e 2
((F64): 1 ) (: log kLN2 / ) $log2 fun

" Algorithm: musl/src/math/log.c from FreeBSD
/* log(x)
 * Return the logrithm of x
 *
 * Method :
 *   1. Argument Reduction: find k and f such that
 *                      x = 2^k * (1+f),
 *         where  sqrt(2)/2 < 1+f < sqrt(2) .
 *
 *   2. Approximation of log(1+f).
 *      Let s = f/(2+f) ; based on log(1+f) = log(1+s) - log(1-s)
 *               = 2s + 2/3 s**3 + 2/5 s**5 + .....,
 *               = 2s + s*R
 *      We use a special Remez algorithm on [0,0.1716] to generate
 *      a polynomial of degree 14 to approximate R The maximum error
 *      of this polynomial approximation is bounded by 2**-58.45. In
 *      other words,
 *                      2      4      6      8      10      12      14
 *          R(z) ~ Lg1*s +Lg2*s +Lg3*s +Lg4*s +Lg5*s  +Lg6*s  +Lg7*s
 *      (the values of Lg1 to Lg7 are listed in the program)
 *      and
 *          |      2          14          |     -58.45
 *          | Lg1*s +...+Lg7*s    -  R(z) | <= 2
 *          |                             |
 *      Note that 2s = f - s*f = f - hfsq + s*hfsq, where hfsq = f*f/2.
 *      In order to guarantee error in log below 1ulp, we compute log
 *      by
 *              log(1+f) = f - s*(f - R)        (if f is not too large)
 *              log(1+f) = f - (hfsq - s*(hfsq+R)).     (better accuracy)
 *
 *      3. Finally,  log(x) = k*ln2 + log(1+f).
 *                          = k*ln2_hi+(f-(hfsq-(s*(hfsq+R)+k*ln2_lo)))
 *         Here ln2 is split into two floating point number:
 *                      ln2_hi + ln2_lo,
 *         where n*ln2_hi is always exact for |n| < 2000.
 *
 * Special cases:
 *      log(x) is NaN with signal if x < 0 (including -INF) ;
 *      log(+INF) is +INF; log(0) is -INF with signal;
 *      log(NaN) is that NaN with no signal.
 *
 * Accuracy:
 *      according to an error analysis, the error is always less than
 *      1 ulp (unit in the last place).
 *
 * Constants:
 * The hexadecimal values are the intended ones for the following
 * constants. The decimal values may be used, provided that the
 * compiler will convert from decimal to binary accurately enough
 * to produce the hexadecimal values shown.
 */
" pop
((F64): 1 ) (:
    # Some constants
    6.93147180369123816490e-01  $ln2_hi =   # 3fe62e42 fee00000
    1.90821492927058770002e-10  $ln2_lo =   # 3dea39ef 35793c76
    1.80143985094819840000e+16  $two54  =   # 43500000 00000000
    6.666666666666735130e-01    $lg1 =      # 3FE55555 55555593
    3.999999999940941908e-01    $lg2 =      # 3FD99999 9997FA04
    2.857142874366239149e-01    $lg3 =      # 3FD24924 94229359
    2.222219843214978396e-01    $lg4 =      # 3FCC71C5 1D8E78AF
    1.818357216161805012e-01    $lg5 =      # 3FC74664 96CB03DE
    1.531383769920937332e-01    $lg6 =      # 3FC39A09 D078C69F
    1.479819860511658591e-01    $lg7 =      # 3FC2F112 DF3E5244

    $x =
    x bits.reinterpret $u =
    u 32L >> I32 cast $hx =

    ((I32 F64 I64 I32):
        ( $k $x $u $hx ) =

        hx 0x3FF00000 0x3FE6A09E - + $hx2 =
        k 0x3FF - hx2 20 >> + $k2 =
        hx2 0x000FFFFF bits.and 0x3FE6A09E + $hx3 =
        hx3 bits.zero_extend 32L << u 0xFFFFFFFFL bits.and bits.or $u2 =
        u2 bits.reinterpret $x =

        x 1.0 - $f =
        0.5 f f * * $hfsq =
        f 2.0 f + / $s =
        s s * $z =
        z z * $w =
        w lg2 w lg4 w lg6 * + * + * $t1 =
        z lg1 w lg3 w lg5 w lg7 * + * + * + * $t2 =
        t1 t2 + $r =
        k2 F64 cast $dk =

        s hfsq r + * dk ln2_lo * + hfsq - f + dk ln2_hi * +
    ) $calculate =

    (: 1 ) (:
        0 x u hx
        calculate
    ) $edge_cases fun
    (: hx 0x7FF00000 >= ) (: x ) $edge_cases fun
    (: hx 0x3FF00000 == u 32L << 0L == && ) (: 0.0 ) $edge_cases fun
    (: hx 0x00100000 < hx 31 >> || ) (:
        (: 1 ) (:
            -54                 # k
            x two54 * dup       # x
            bits.reinterpret    # u
            dup 32L >> I32 cast # hx
            calculate
        ) $branch fun
        (: u 1L << 0L == ) (: -1.0 x x * / ) $branch fun
        (: hx 31 >> ) (: x x - 0.0 / ) $branch fun
        branch
    ) $edge_cases fun
    edge_cases
) $log fun
((F32): 1 ) (: F64 cast log ) $log fun

# Trig Utils
(:  ((number.Float dup): type swap type == ) (:
        - dup type number.limits.epsilon <=
    ) $feq fun
    ((number.Float dup dup number.Int dup number.Float) rec:
        ( $x $sum $n $i $s $t ) =
        (: 1 ) (: x    sum t s * n /    n i * i 1 + *    i 2 +    s neg    t x x * *    trig_series ) $branch fun
        (: sum sum t s * n / + feq ) (: sum ) $branch fun
        branch
    ) $trig_series =
) namespace $detail =

# Basic Trig functions
((number.Float): 1 ) (:
    dup $x = type $T =
    x  x  6.0 T cast  4  -1  x x * x *  detail.trig_series
) $sin fun
((number.Float): 1 ) (:
    dup $x = type $T =
    x  1.0 T cast  2.0 T cast  3  -1  x x *  detail.trig_series
) $sin fun
((Any): 1 ) (: $x = x sin  x cos / ) $tan fun
((Any): 1 ) (: $x = x cos  x sin / ) $cot fun
((Any): 1 ) (: $x = 1 x cos / ) $sec fun
((Any): 1 ) (: $x = 1 x sin / ) $csc fun
