"../std/lang.phs" require use

# Generic vec2 type
(: $T = ( T T ) ) class $Vec2 =

# Contains vec2 or not
(:  F64 Vec2 class $Just =
    () type class $Nothing =
) enum $MaybeVec =

# Linked List of Maybe vectors
( $List rec:
    ( ) type class $Nil =
    ( MaybeVec List ) class $Node =
) enum $List =

# Describe types
#List :data
#List.Node :data

# Length of linked list
(:  (rec:
        $ret =
        (   List.Nil (:
                pop
                ret
            )
            List.Node (:
                unpack ( $v $next ) =
                next  ret 1 + iter
            )
        ) match
    ) $iter =
    0 iter
) $List.len =

# Make some coords
( 0.0  0.0 ) F64 Vec2 make MaybeVec.Just make $v1 =
( 1.0  1.0 ) F64 Vec2 make MaybeVec.Just make $v2 =
( 1.0  0.0 ) F64 Vec2 make MaybeVec.Just make $v3 =
( 0.0  1.0 ) F64 Vec2 make MaybeVec.Just make $v4 =
( 0.0  0.0 ) F64 Vec2 make MaybeVec.Just make $v5 =

# Make a linked list
( v1 ( v2 ( v3 ( v4 ( v5
    () List.Nil make
    ) List.Node make
    ) List.Node make
    ) List.Node make
    ) List.Node make
    ) List.Node make
$ll =

ll :data
ll List.len :data

###
## Runtime demo
###

# Import Math.random from javascript
Unit (F64) Arrow ( "js" "Math.random" ) import $random =

# Generate a random MaybeVec
(:  (: 1 ) (:
        ( random random ) F64 Vec2 make MaybeVec.Just make
    ) $branch fun
    (: random 0.1 < ) (:
        () MaybeVec.Nothing make
    ) $branch fun
    branch
) $randVec =

(I32) (:
    # Append n randomly generated nodes to a list
    ((I32 List) (List) rec:
        ( $n $ll ) =
        (: 1 ) (: ll ) $branch fun
        (: n 0 > ) (:
            n 1 -
            ( randVec ll ) List.Node make
            mk_list
        ) $branch fun
        branch
    ) $mk_list =

    # Append n randomly generated nodes onto an empty list
    () List.Nil make mk_list $list =

    # Return the length of the list
    list List.len
) "test" export