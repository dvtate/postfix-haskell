"./stdlib/prelude.phs" require use

# Define an enum type
(:  I32 class $Number =
    (I32 I32) class $PointRel =
    (I32 I32 I32) class $SemVer3 =
) enum $Version =

# Make some enums
251 Version.Number make $systemd_version =
( 8 1 ) Version.PointRel make $windows_version =
( 18 3 0 ) Version.SemVer3 make $nodejs_version =

(:  (   Version.Number (:
            $n =
            ( 0 0 n ) Version.SemVer3 make
        )
        Version.PointRel (:
            unpack ( $maj $min ) =
            ( maj min 0 ) Version.SemVer3 make
        )
        Version.SemVer3 (: Version.SemVer3 make )
    ) match
) $to_semver =

(:  (   Version.Number   (: $v = v )
        Version.PointRel (: unpack pop )
        Version.SemVer3  (: unpack pop pop )
    ) match
) $get_major_version =

#$to_semver ~ :type
windows_version to_semver :type
systemd_version get_major_version :data
windows_version get_major_version :data
windows_version to_semver get_major_version :data
nodejs_version get_major_version :data

# Boolean type
(:  Unit class $True =
    Unit class $False =
) enum $Bool =

# Overload prelude.cast to cast ints to Bool enums
((I32 Syntax:EnumNs): Bool __typecheck ) (: pop pop () Bool.True make ) $to fun
((I32 Syntax:EnumNs): ( $v $Enum ) =
    Enum Bool __typecheck v 0 == &&
) (: pop pop () Bool.False make ) $to fun

((Bool Syntax:Type): I32 == ) (:
    pop
    (   Bool.False (: pop 0 )
        Bool.True (: pop 1 )
    ) match
) $cast fun

((Bool Bool): 1 ) (:
    swap
    (   Bool.True (: pop
            (   Bool.True (: pop () Bool.True make )
                Bool.False (: pop () Bool.False make )
            ) match
        )
        Bool.False (: pop pop () Bool.False make )
    ) match
) $and fun

( I32 I32 ) (:
    ( $v1 $v2 ) =
    v1 Bool to
    v2 Bool to and I32 cast
) "anddemo" export