"../std/lang.phs" require use
"../std/io.phs" require $io =
"../std/map.phs" require $map =

I32 F64 map.Map $Tree =

#() Tree.Nil make
#2 2.0 Tree.set
#0 0.0 Tree.set
#1 1.0 Tree.set
#3 3.0 Tree.set
#4 4.0 Tree.set
#5 5.0 Tree.set
#
#dup -1 Tree.get :data
#dup 0 Tree.get :data
#dup 1 Tree.get :data
#dup 2 Tree.get :data
#dup 3 Tree.get :data
#dup 4 Tree.get :data
#dup 5 Tree.get :data
#dup 6 Tree.get :data
#pop

# Import Math.random from javascript
Unit (F64) Arrow ( "js" "Math.random" ) import $random =

# Add n elements to a tree
(( Tree I32 ) (Tree) rec:
    ( $t $n ) =
    (: 1 ) (: t ) $branch fun
    (: n 0 > ) (:
        t random 100 * I32 cast n F64 cast Tree.set
        n 1 -
        make_tree
    ) $branch fun
    branch
) $make_tree =

(:
    dup type $TT =
    (rec:
        ( $t $i ) =

        t i TT.get_row $r =
        r type $LT =

        (: 1 ) (:
            r swap (: io.print ) LT.foldr
            "---" io.print
            t i 1 + print_each_row
        ) $branch fun
        (: r LT.is_empty ) (: io.nop ) $branch fun
        branch
    ) $print_each_row =

    0 print_each_row
) $print_tree =

( Unit io.IO I32 ) (:
    $n =

    # Start with an empty tree
    () Tree.Nil make

    # Add n random nodes
    n make_tree

    # Print it
    print_tree
) "demo" export
