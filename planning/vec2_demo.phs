# Import standard library (ie - math, stack operators)
"./stdlib/prelude.phs" require use

# TODO use namespaces

# A type that accepts an integer of any size
I32 I64 | $Int =

# Floating point union type
# Note the (: ) makes it lazy evaluated
(: F32 F64 | ) $Float =

# Specify a tuple type consiting of two numbers
( Float Int | dup ) $Pair =

# Using `class` makes the type more strict
#  It will only accept instances of same class
Pair class $Vector2 =

# Access properties
((Vector2): 1 ) (: unpack pop ) $x fun
((Vector2): 1 ) (: unpack ( $_ $y ) = y ) $y fun

# Alternative to methods
((Vector2  Float Int |): 1 ) (: swap scale ) $scale fun
((Float Int | Vector2): 1 ) (:
	# Return a new vector with scaled coords
	( $f $v ) =
	(	v x f *
		v y f *
	) Vector2 make
) $scale fun

# Operator overloading
((Vector2 Vector2): 1) (:
	# Return new vector with sum
	$b = $a =
	(	a x  b x +
		a y  b y +
	) Vector2 make
) $global.+ fun

# Use the make operator to instantiate a class
( 2 1 ) Vector2 make $v =

# Access fields via access operators
v x :data	# 2
v y :data	# 1

# Make a scaled version of v
# Notice it's 2x as big
2 v scale $v2 =
v2 :data # [ 4, 2 ]

# Add the vectors
v v2 + :data # [ 6, 3 ]