"./stdlib/prelude.phs"  require use
"./stdlib/math.phs"     require $math =

# Identity
(: $a = $a ~ ) $id =

# Maybe monad
(:  $T =
    (:  T class $Just =
        () type class $Nothing =
    ) enum
) $Maybe =
F64 Maybe $DblMaybe =

# Wrappers for square route and natural log which give Maybe.Nothing on invalid input
(:  (   DblMaybe.Just (:
            (: 1 ) (: math.sqrt DblMaybe.Just make ) $chk0 fun
            (: 0 <= ) (: pop () DblMaybe.Nothing make ) $chk0 fun
            chk0
        )
        DblMaybe.Nothing (: DblMaybe.Nothing make )
    ) match
) $safeSqrt =
(:  (   DblMaybe.Just (:
            (: 1 ) (: math.log DblMaybe.Just make ) $chk0 fun
            (: 0 <= ) (: pop () DblMaybe.Nothing make ) $chk0 fun
            chk0
        )
        DblMaybe.Nothing (: DblMaybe.Nothing make )
    ) match
) $safeLog =

(F64) (:
    # Wrap raw input with maybe monad
    DblMaybe.Just make

    # Apply safeLog then apply safeSqrt
    safeLog safeSqrt

    # Pattern match on maybe monad
    (   DblMaybe.Just (: id )
        DblMaybe.Nothing (: pop 0.0 )
    ) match

    # TODO add infinite loop to test gc
) "test" export