"./lang.phs" require use

(:  $ValueType =

    (:  () type class $Nothing =
        ValueType class $Just =
    ) enum $MaybeType =

    # Bind calls a function on a Just value
    # If given Nothing returns Nothing instead
    (( MaybeType Syntax:Macro (ValueType) (MaybeType) Arrow | ): 
        $f =
        (   MaybeType.Nothing (: pop () MaybeType.Nothing make )
            MaybeType.Just (: f )
        ) match
    ) $MaybeType.bind =

    # Invokes v when given nothing, otherwise returns given value
    (( MaybeType dup Syntax:Macro Unit (MaybeType) Arrow | | ):
        $v =
        (   MaybeType.Nothing (: v )
            MaybeType.Just ((MaybeType)(MaybeType): )
        ) match
    ) $MaybeType.fails =

    (( MaybeType ValueType ValueType ):
        ( $bound $default ) =
        (   MaybeType.Nothing (: pop default )
            MaybeType.Just (: pop bound )
        ) match
    ) $MaybeType.bind_default =

    (( MaybeType ValueType):
        $default_value =
        (   MaybeType.Nothing (: pop default_value )
            MaybeType.Just    (: $v = $v ~ )
        ) match
    ) $MaybeType.or_default =

    # Get the value from the maybe or panic (unreachable) if Nothing
    ((MaybeType):
        (   MaybeType.Nothing (: 
                pop Unit ( ValueType ) Arrow "(unreachable)" __asm
            )
            MaybeType.Just (:
                $v = $v ~
            )
        ) match
    ) $MaybeType.or_trap =

    MaybeType
) $Maybe =
