"./lang.phs" require $lang =
"./list.phs" require "List" "" use_some

# Make concatenate string literals
((Syntax:Str Syntax:Str): 1 ) (:
    # I just wasted 2 mins making this lol
    "(() => {
        const b = ctx.pop().value;
        const v = ctx.pop().value + b;
        ctx.push(new value.StrValue(token, v));
    })()" :eval
) $global.+ fun

# String class
( I32 I32 ) class $StaticStr =
((StaticStr): 1 ) (: unpack lang.pop ) $size fun
((StaticStr): 1 ) (: unpack lang.swap lang.pop ) $addr fun

# Overload cast operator to convert static string literals
((Syntax:Str Syntax:Type): StaticStr == ) (:
    pop $lit =
    ( lit ) StaticStr make
) $lang.cast fun

# Characters are stored in I32's for performance reasons
I32 $Char =

# Strings could be represented as a list of characters
# But this doesn't interface well with the host environment
# Also each character is represented as an i32
Char List $ListStr =

# TODO implement strings similar to Haskell's Data.Text
