"./lang.phs" require $lang =
"./list.phs" require $list =

###
# Static Strings
# Datatype for string literals that get stored in linear memory
###

# Make concatenate string literals
((Syntax:Str Syntax:Str): 1 ) (:
    # I just wasted 2 mins making this lol
    "(() => {
        const b = ctx.pop().value;
        const v = ctx.pop().value + b;
        ctx.push(new value.StrValue(token, v));
    })()" :eval
) $global.+ fun

# String class
( I32 I32 ) class $StaticStr =
((StaticStr): 1 ) (: unpack lang.pop ) $size fun
((StaticStr): 1 ) (: unpack lang.swap lang.pop ) $addr fun

# Overload cast operator to convert static string literals
((Syntax:Str Syntax:Type): StaticStr == ) (:
    pop $lit =
    ( lit ) StaticStr make
) $lang.cast fun

###
# List Str
# This is used for program-generated strings
###

# Characters stored in I32's, yes, 3 wasted bytes
I32 $Char =

(: $c =
    c 0x09 >= c 0x0d <= && # \t \n \v \f \r
    c ' ' == ||
) $is_space =

# Non-static strings are Lists of characters
Char list.List $Str =

# Convert from compile-time string type to runtime string type
((StaticStr Syntax:Type): Str == ) (:
    pop
    unpack ( $size $address ) =

    # Read in reverse, constructing list elements as we go
    ((I32 I32 Str) (Str) rec:
        ( $addr $n $ret ) =
        (: 1 ) (:
            ret
        ) $branch fun
        (: n 0 >= ) (:
            addr n + "i32.load8_u" asm $c =
            addr
            n 1 -
            ret c Str.cons
            iter
        ) $branch fun
        branch
    ) $iter =

    address size Str.empty
    iter
) $lang.cast fun
((Syntax:Str Syntax:Type): Str == ) (:
    pop
    StaticStr lang.cast
    Str lang.cast
) $lang.cast fun

# Repeat str (like in python "-" * 5 => "-----")
((Str I32): 1 )
(:
    ( $s $n ) =
    s (:
        s swap ++
    ) n loop
) $global.* fun


"./math.phs" require $math =

# Recursive itoa implementation
(rec:
    ( $n $base $ret ) =

    # Get character representation of 1's place digit
    # note: if n == 0 this gives '0' first call
    ret
    n base % I32 cast $d =
    d 9 >
        '0'
        'a' 10 -
        "select" asm d +
    Str.cons
    $ret2 =

    # Next digit
    #n base / $value =

    (: 1 ) (:
        n base / base ret2 _itoa
    ) $branch fun
    (: n base / 0 == ) (:
        ret2
    ) $branch fun
    branch
) $_itoa =

(( I32 I64 | I32): 1 ) (:
    ( $n $base ) =

    n math.abs
    base
    Str.empty
    _itoa

    # Negative sign
    (: 1 ) (: ) $add_sign fun
    (: n 0 < ) (: '-' Str.cons ) $add_sign fun
    add_sign
) $itoa fun

((Str I32 I64 | ): 1 )
(:
    ( $s $n ) =
    s n itoa ++
) $global.++ fun


#(( F32 F64 | ): 1 ) (:
#    
#) $ftoa fun
#
#((Str)(Syntax:Type):
#    I64 ==
#) (:
#
#) $lang.cast fun

###
# Vec Strings
# TODO make a Vector type with character specialization similar to haskell's Data.Text
###