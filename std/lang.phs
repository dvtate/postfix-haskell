# Empty type
() type $Unit =
Never $Void =

# Stack
(: $_ = ) $pop =				# Pop value
(: $v = $v ~ $v ~ ) $dup =			# Duplicate value
(: ( $a $b ) = $b ~ $a ~ ) $swap = # swap values

# Booleans
1 $true  =
0 $false =

# Logic
((I32): 1 ) (: false == ) $global.! fun

# And
# Notice the @ for short-circuit
(: true ) (: pop pop false ) $global.&& fun
(: swap ) (: swap pop @ ) $global.&& fun

# Or
(: true ) (: pop pop false ) $global.|| fun
(: swap pop ) (: swap pop @ ) $global.|| fun
(: pop ) (: pop @ ) $global.|| fun

##
# Cast a value callable one type to another type
# <value> <type> cast
##

# No need to cast if already same type as target
# Maybe remove classescallable
(: swap type == ) (: pop ) $cast fun

# Cast to I32
((I64 Syntax:Type): I32 == ) (: pop "i32.wrap_i64" asm ) $cast fun
((F32 Syntax:Type): I32 == ) (: pop "i32.trunc_f32_s" asm ) $cast fun
((F64 Syntax:Type): I32 == ) (: pop "i32.trunc_f64_s" asm ) $cast fun

# Cast to I64
((I32 Syntax:Type): I64 == ) (: pop "i64.extend_i32_s" asm ) $cast fun
((F32 Syntax:Type): I64 == ) (: pop "i64.trunc_f32_s" asm ) $cast fun
((F64 Syntax:Type): I64 == ) (: pop "i64.trunc_f64_s" asm ) $cast fun

# Cast to F32
((I32 Syntax:Type): F32 == ) (: pop "f32.convert_i32_s" asm ) $cast fun
((I64 Syntax:Type): F32 == ) (: pop "f32.convert_i64_s" asm ) $cast fun
((F64 Syntax:Type): F32 == ) (: pop "f32.demote_f64" asm ) $cast fun

# Cast to F64
((I32 Syntax:Type): F64 == ) (: pop "f64.convert_i32_s" asm ) $cast fun
((I64 Syntax:Type): F64 == ) (: pop "f64.convert_i64_s" asm ) $cast fun
((F32 Syntax:Type): F64 == ) (: pop "f64.promote_f32" asm ) $cast fun

# Perform promotion
((I64 F64): 1 ) (: swap F64 cast swap ) $__promote fun
((F64 I64): 1 ) (: F64 cast ) $__promote fun
((I64 F32): 1 ) (: swap F32 cast swap ) $__promote fun
((F32 I64): 1 ) (: F32 cast ) $__promote fun
((I32 I64): 1 ) (: swap I64 cast swap ) $__promote fun
((I64 I32): 1 ) (: I64 cast ) $__promote fun
((I32 F32): 1 ) (: swap F32 cast swap ) $__promote fun
((F32 I32): 1 ) (: F32 cast ) $__promote fun
((F32 F64): 1 ) (: swap F64 cast swap ) $__promote fun
((F64 F32): 1 ) (: F64 cast ) $__promote fun
((I32 F64): 1 ) (: swap F64 cast swap ) $__promote fun
((F64 I32): 1 ) (: F64 cast ) $__promote fun

# Condition for numeric type promotions
I32 I64 | F32 F64 | | $__Scalar =
((__Scalar __Scalar): ( $a $b ) =
	a type b type == !
) $__can_promote =

# Do we know at compile time that the value is a 0/1/-1
(: 1 ) (: 0 ) $__is_0 fun
((I32): is_const ) (: "i32.eqz" asm ) $__is_0 fun
((I64): is_const ) (: "i64.eqz" asm ) $__is_0 fun
((F32): is_const ) (: 0.0f "f32.eq" asm ) $__is_0 fun
((F64): is_const ) (: 0.0l "f64.eq" asm ) $__is_0 fun
(: 1 ) (: 0 ) $__is_1 fun
((I32): is_const ) (: 1 == ) $__is_1 fun
((I64): is_const ) (: 1L == ) $__is_1 fun
((F32): is_const ) (: 1.0f == ) $__is_1 fun
((F64): is_const ) (: 1.0l == ) $__is_1 fun
(: 1 ) (: 0 ) $__is_neg1 fun
((I32): is_const ) (: -1 == ) $__is_neg1 fun
((I64): is_const ) (: -1L == ) $__is_neg1 fun
((F32): is_const ) (: -1.0f == ) $__is_neg1 fun
((F64): is_const ) (: -1.0l == ) $__is_neg1 fun
(: 1 ) (: 0 ) $__is_2 fun
((I32): is_const ) (: 2 == ) $__is_2 fun
((I64): is_const ) (: 2L == ) $__is_2 fun


##
# Operator ==
##

((I32 I32): __is_0 ) (: pop "i32.eqz" asm ) $global.== fun
((I32 I32): pop __is_0 ) (: swap pop "i32.eqz" asm ) $global.== fun
((I64 I64): __is_0 ) (: pop "i64.eqz" asm ) $global.== fun
((I64 I64): pop __is_0 ) (: swap pop "i64.eqz" asm ) $global.== fun

((I32 I64): 1 ) (: swap I64 cast swap == ) $global.== fun
((I64 I32): 1 ) (: I64 cast == ) $global.== fun
((F32 F64): 1 ) (: swap F64 cast swap == ) $global.== fun
((F64 F32): 1 ) (: F64 cast == ) $global.== fun

((Syntax:Type Syntax:Type): 1 ) (: __typecheck ) $global.== fun

##
# Operator !=
##

# Make != also work on untyped values
(: true ) (: == ! ) $global.!= fun

# Compare of same type
((I32 I32): 1 ) (: "i32.ne_s" asm ) $global.!= fun
((I64 I64): 1 ) (: "i64.ne_s" asm ) $global.!= fun
((F32 F32): 1 ) (: "f32.ne" asm ) $global.!= fun
((F64 F64): 1 ) (: "f64.ne" asm ) $global.!= fun

# Attempt to promote values to same type
$__can_promote ~ (: __promote != ) $global.!= fun

##
# Operator +
##

# Add values of same type
((I32 I32): 1 ) (: "i32.add" asm ) $global.+ fun
((I64 I64): 1 ) (: "i64.add" asm ) $global.+ fun
((F32 F32): 1 ) (: "f32.add" asm ) $global.+ fun
((F64 F64): 1 ) (: "f64.add" asm ) $global.+ fun

# Attempt to promote values to same type
$__can_promote ~ (: __promote + ) $global.+ fun

# Optimization when one of the values is known to be zero the result is the other value
(: pop $a = a __is_0 ) (: swap pop ) $global.+ fun
(: __is_0 ) (: pop ) $global.+ fun

##
# Operator -
##

# Negation
((I32): 1 ) (: $n = 0 n "i32.sub" asm ) $neg fun
((I64): 1 ) (: $n = 0L n "i64.sub" asm ) $neg fun
((F32): 1 ) (: "f32.neg" asm ) $neg fun
((F64): 1 ) (: "f64.neg" asm ) $neg fun

# Subtract values of same type
((I32 I32): 1 ) (: "i32.sub" asm ) $global.- fun
((I64 I64): 1 ) (: "i64.sub" asm ) $global.- fun
((F32 F32): 1 ) (: "f32.sub" asm ) $global.- fun
((F64 F64): 1 ) (: "f64.sub" asm ) $global.- fun

# Attempt to promote values to same type
$__can_promote ~ (: __promote - ) $global.- fun

# Optimization when one of the values is known to be zero
(: pop $a = a __is_0 ) (: swap pop neg ) $global.- fun
(: __is_0 ) (: pop ) $global.- fun

##
# Operator *
##

# Mul values of same type
((I32 I32): 1 ) (: "i32.mul" asm ) $global.* fun
((I64 I64): 1 ) (: "i64.mul" asm ) $global.* fun
((F32 F32): 1 ) (: "f32.mul" asm ) $global.* fun
((F64 F64): 1 ) (: "f64.mul" asm ) $global.* fun

# Attempt to promote values to same type
$__can_promote ~ (: __promote * ) $global.* fun

# Optimization for identity property of multiplication
(: pop __is_1 ) (: swap pop ) $global.* fun
(: __is_1 ) (: pop ) $global.* fun

# Negation
(: pop __is_neg1 ) (: swap pop neg ) $global.* fun
(: __is_neg1 ) (: pop neg ) $global.* fun

# Optimization for zero property of multiplication
# TODO? maybe make the zero the same type?
(: pop __is_0 ) (: pop pop 0 ) $global.* fun
(: __is_0 ) (: pop pop 0 ) $global.* fun

# TODO optimize to shl

##
# Operator /
##

# Div values of same type
((I32 I32): 1 ) (: "i32.div_s" asm ) $global./ fun
((I64 I64): 1 ) (: "i64.div_s" asm ) $global./ fun
((F32 F32): 1 ) (: "f32.div" asm ) $global./ fun
((F64 F64): 1 ) (: "f64.div" asm ) $global./ fun

# Attempt to promote values to same type
$__can_promote ~ (: __promote / ) $global./ fun

# Divide by 1 is identity
(: __is_1 ) (: pop ) $global./ fun

# 0 divided by anything is 0
(: pop __is_0 ) (: pop ) $global./ fun

##
# Operator %
##

# Remainder values of same type
((I32 I32): 1 ) (: "i32.rem_s" asm ) $global.% fun
((I64 I64): 1 ) (: "i64.rem_s" asm ) $global.% fun
((F32 F32): 1 ) (: "f32.rem" asm ) $global.% fun
((F64 F64): 1 ) (: "f64.rem" asm ) $global.% fun

# Optimization for remainder 2
((I32 I32): __is_2 ) (: pop 1  "i32.and" asm ) $global.% fun
((I64 I64): __is_2 ) (: pop 1L "i64.and" asm ) $global.% fun

# Attempt to promote values to same type
$__can_promote ~ (: __promote % ) $global.% fun


##
# Operator <
##

# Compare of same type
((I32 I32): 1 ) (: "i32.lt_s" asm ) $global.< fun
((I64 I64): 1 ) (: "i64.lt_s" asm ) $global.< fun
((F32 F32): 1 ) (: "f32.lt" asm ) $global.< fun
((F64 F64): 1 ) (: "f64.lt" asm ) $global.< fun

# Attempt to promote values to same type
$__can_promote ~ (: __promote < ) $global.< fun

##
# Operator >
##

# Compare of same type
((I32 I32): 1 ) (: "i32.gt_s" asm ) $global.> fun
((I64 I64): 1 ) (: "i64.gt_s" asm ) $global.> fun
((F32 F32): 1 ) (: "f32.gt" asm ) $global.> fun
((F64 F64): 1 ) (: "f64.gt" asm ) $global.> fun

# Attempt to promote values to same type
$__can_promote ~ (: __promote > ) $global.> fun

##
# Operator >=
##

# Compare of same type
((I32 I32): 1 ) (: "i32.ge_s" asm ) $global.>= fun
((I64 I64): 1 ) (: "i64.ge_s" asm ) $global.>= fun
((F32 F32): 1 ) (: "f32.ge" asm ) $global.>= fun
((F64 F64): 1 ) (: "f64.ge" asm ) $global.>= fun

# Attempt to promote values to same type
$__can_promote ~ (: __promote >= ) $global.>= fun

##
# Operator <=
##

# Compare of same type
((I32 I32): 1 ) (: "i32.le_s" asm ) $global.<= fun
((I64 I64): 1 ) (: "i64.le_s" asm ) $global.<= fun
((F32 F32): 1 ) (: "f32.le" asm ) $global.<= fun
((F64 F64): 1 ) (: "f64.le" asm ) $global.<= fun

# Attempt to promote values to same type
$__can_promote ~ (: __promote <= ) $global.<= fun

##
# Control flow
## 

# Performs a tuple of operations in order
# The results of which are stored in locals for later use out of order
# TODO constexprs should be ignored/optimized
(: $t =
	t unpack t type dup Arrow "" __asm
) $seq =

# Invoke given macro/value a given number of times
# Example:	(: ( $x $n ) = x (: x * ) n loop ) $bad_pow =
# Example2:	( 1 5 loop ) :data # ( 1 1 1 1 1 )
(:	( $callable $n ) =
	(rec:
		$n =
		(: 1 ) (: ) $branch fun
		(: n 0 > ) (:
			callable
			n 1 -
			loop_impl
		) $branch fun
		branch
	) $loop_impl =
	n loop_impl
) $loop =