"./lang.phs"    require use
"./monad.phs"   require "Monad" "" use_some
"./str.phs"     require $str =

# Deprecated

# IO extends class monad
$Monad ~ class $IO =

# Define print for numbers
((Any IO  __Scalar): 1 )
(: ( $io $v ) =
    io v ( io type v type ) ( io type ) Arrow ( "js" "console.log" ) import @
) $print fun

# Define print for strings
((Any IO  str.StaticStr): 1 )
(: ( $io $str ) =
    io str ( io type str.StaticStr ) ( io type ) Arrow ( "js" "logStr" ) import @
) $print fun

# Convert string literals to static strings
((Any IO Syntax:Str): 1 )
(: ( $io $strl ) =
    $strl ~ str.StaticStr cast $s =
    io s ( io type str.StaticStr ) ( io type ) Arrow ( "js" "logStr" ) import @
) $print fun

((Any IO str.Str): 1 )
(: ( $io $strl ) =
    io strl
    ( str.Str ) ( I32 ) Arrow
        "(drop)(call $__ref_stack_pop)" __asm
    ( io type I32 ) ( io type ) Arrow
        ( "js" "logStrList" ) import @
) $print fun

# If one branch does IO operations so should the others so that the arrow types match
# This macro tricks the compiler so that we don't have to actually do any IO
( ( Any IO )( Any IO ):
    $io = $io ~
) $nop =